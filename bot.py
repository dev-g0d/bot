import discord
from discord.ext import commands
import requests
import re
import os
import threading
from flask import Flask 
import json
import time
import datetime 
import locale   

# --- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Locale ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô) ---
# ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£ (Windows, Linux, Mac)
try:
    locale.setlocale(locale.LC_ALL, 'th_TH.utf8')
except locale.Error:
    try:
        # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏´‡∏£‡∏∑‡∏≠ environments ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
        locale.setlocale(locale.LC_ALL, 'th_TH')
    except locale.Error:
        # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤ fallback
        print("Warning: Could not set Thai locale. Dates will be in English/Default format.")
        pass


# --- 1. Flask Keep-Alive Setup ---
web_app = Flask('') 

@web_app.route('/')
def home():
    return "Discord Bot is running and ready to serve!"

def run_web_server():
    port = int(os.environ.get("PORT", 8080))
    web_app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)

def keep_alive():
    t = threading.Thread(target=run_web_server)
    t.start()
    
# --- 2. Configuration & API Endpoints ---
DISCORD_BOT_TOKEN = os.environ.get("DISCORD_BOT_TOKEN", "YOUR_BOT_TOKEN_HERE") 
ALLOWED_CHANNEL_ID = 1098314625646329966  
DEVGOD_BASE_URL = "https://devg0d.pythonanywhere.com/app_request/"
STEAMCMD_API_URL = "https://api.steamcmd.net/v1/info/"

# Steam Store API URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏Å‡∏°
STEAM_APP_DETAILS_URL = "https://store.steampowered.com/api/appdetails?appids="

# Intents
intents = discord.Intents.default()
intents.messages = True
intents.message_content = True
intents.guilds = True

bot = commands.Bot(command_prefix='!', intents=intents)

# --- 3. Helper Functions ---
def extract_app_id(message_content):
    if message_content.isdigit():
        return message_content
    match = re.search(r'(?:steamdb\.info\/app\/|store\.steampowered\.com\/app\/)(\d+)', message_content)
    if match:
        return match.group(1)
    return None

def fetch_release_date_from_store_api(app_id: str) -> str:
    """
    ‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ß‡∏≤‡∏á‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏à‡∏≤‡∏Å Steam Store API 
    ‡πÉ‡∏ä‡πâ cc=th&l=th ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ API ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    """
    # ‡πÉ‡∏ä‡πâ cc=th&l=th ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ API ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    url = f"{STEAM_APP_DETAILS_URL}{app_id}&cc=th&l=th" 
    
    try:
        response = requests.get(url, timeout=5)
        response.raise_for_status()
        data = response.json()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á JSON
        if data and data.get(app_id, {}).get('success') is True:
            release_date_str = data[app_id].get('data', {}).get('release_date', {}).get('date', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')
            
            if release_date_str == '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏':
                return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'

            # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© (Month Day, Year) 
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏ä‡πà‡∏ô 28 ‡πÄ‡∏°.‡∏¢. 2017) ‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î ValueError ‡πÅ‡∏•‡∏∞‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ string ‡πÄ‡∏î‡∏¥‡∏°
            try:
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å locale ‡πÄ‡∏î‡∏¥‡∏° ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á locale ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÄ‡∏û‡∏∑‡πà‡∏≠ parse ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
                original_locale = locale.getlocale(locale.LC_TIME)
                # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ locale ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ strptime ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
                locale.setlocale(locale.LC_TIME, 'en_US.utf8') 
                
                release_date_obj = datetime.datetime.strptime(release_date_str, '%b %d, %Y')
                
                # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ locale ‡πÄ‡∏î‡∏¥‡∏°
                try:
                    locale.setlocale(locale.LC_TIME, original_locale[0] or 'th_TH.utf8')
                except:
                    pass

                # ‡∏ñ‡πâ‡∏≤ parse ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ format ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ (‡πÉ‡∏ä‡πâ global locale ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô)
                # ‡πÉ‡∏ä‡πâ %#d ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Windows ‡∏´‡∏£‡∏∑‡∏≠ %-d ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Linux/Mac ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÄ‡∏•‡∏Ç 0 ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ß‡∏±‡∏ô
                return release_date_obj.strftime('%#d %B %Y')

            except ValueError:
                # ‡∏ñ‡πâ‡∏≤ parse ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô)
                # ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ string ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å API (‡∏ã‡∏∂‡πà‡∏á‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢)
                try:
                    locale.setlocale(locale.LC_TIME, original_locale[0] or 'th_TH.utf8')
                except:
                    pass
                return release_date_str
            except locale.Error:
                # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ locale ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á parse ‡∏î‡πâ‡∏ß‡∏¢ C locale
                try:
                    locale.setlocale(locale.LC_TIME, 'C')
                    release_date_obj = datetime.datetime.strptime(release_date_str, '%b %d, %Y')
                    
                    # ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ä‡πâ Thai locale ‡πÄ‡∏û‡∏∑‡πà‡∏≠ format
                    try:
                        locale.setlocale(locale.LC_TIME, original_locale[0] or 'th_TH.utf8')
                    except:
                        pass
                    return release_date_obj.strftime('%#d %B %Y')
                except ValueError:
                     # ‡∏ñ‡πâ‡∏≤ parse ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏Å‡πá‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ string ‡πÄ‡∏î‡∏¥‡∏°
                     return release_date_str
            
        return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'

    except requests.RequestException as e:
        print(f"Error fetching Steam Store info for {app_id}: {e}")
        return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'


def get_steam_info(app_id):
    # ‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ß‡∏≤‡∏á‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏à‡∏≤‡∏Å Steam Store API ‡∏Å‡πà‡∏≠‡∏ô
    release_date_thai = fetch_release_date_from_store_api(app_id)
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏à‡∏≤‡∏Å SteamCMD API
    try:
        url = f"{STEAMCMD_API_URL}{app_id}"
        response = requests.get(url, timeout=7)
        response.raise_for_status()
        data = response.json()
        if data and data.get('status') == 'success' and app_id in data['data']:
            app_data = data['data'][app_id]
            common = app_data.get('common', {})
            extended = app_data.get('extended', {})
            
            name = common.get('name', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏≠‡∏õ')
            header_image_hash = common.get('header_image', {}).get('english')
            # ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å SteamCMD ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û header ‡∏Ç‡∏ô‡∏≤‡∏î 460x215
            header_image = f"https://cdn.akamai.steamstatic.com/steam/apps/{app_id}/{header_image_hash}" if header_image_hash else None
            
            dlc_list_str = extended.get('listofdlc', '')
            dlc_items = [item for item in dlc_list_str.split(',') if item.strip()]
            dlc_count = len(dlc_items)

            return {
                'name': name,
                'image': header_image,
                'dlc_count': dlc_count,
                'release_date': release_date_thai, # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Store API
            }
        return None
    except requests.RequestException as e:
        print(f"Error fetching SteamCMD info for {app_id}: {e}")
        return None

def check_file_status(app_id: str) -> str | None:
    """
    ‡∏™‡πà‡∏á request ‡πÑ‡∏õ‡∏¢‡∏±‡∏á devg0d.pythonanywhere.com/app_request/{appid}
    ‡∏ï‡∏≤‡∏° redirect ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
    ‡∏ñ‡πâ‡∏≤ final response = 200 ‡πÅ‡∏•‡∏∞‡∏°‡∏µ content-disposition -> return URL
    ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà -> return None
    """
    url = f"{DEVGOD_BASE_URL}{app_id}"
    headers = {
        "User-Agent": (
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
            "AppleWebKit/537.36 (KHTML, like Gecko) "
            "Chrome/124.0 Safari/537.36"
        )
    }

    try:
        response = requests.get(url, headers=headers, timeout=10, allow_redirects=True)
        final_url = response.url   # URL ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà redirect ‡πÑ‡∏õ‡∏ñ‡∏∂‡∏á

        if response.status_code == 200 and "content-disposition" in response.headers:
            return final_url  # ‡∏Ñ‡∏∑‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á
    except requests.RequestException:
        return None

    return None


# --- 4. Discord Events ---
@bot.event
async def on_ready():
    print(f'Logged in as {bot.user} (ID: {bot.user.id})')
    print('Bot is ready and running!')

@bot.event
async def on_message(message):
    if message.author.bot:
        return

    app_id = extract_app_id(message.content)
    if app_id:
        await message.channel.typing()

        steam_data = get_steam_info(app_id)
        file_url_200 = check_file_status(app_id) 
        
        embed = discord.Embed(
            title=f"üîé ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Steam App ID: {app_id}",
            color=0x1b2838
        )
        
        if steam_data:
            embed.add_field(name="‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏õ", value=steam_data['name'], inline=False)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ß‡∏≤‡∏á‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Store API (‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß)
            embed.add_field(name="‡∏ß‡∏±‡∏ô‡∏ß‡∏≤‡∏á‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢", value=steam_data['release_date'], inline=False) 
            
            embed.add_field(name="DLCs ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", value=f"‡∏û‡∏ö **{steam_data['dlc_count']}** ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", inline=True)
            
            # ‡∏•‡∏¥‡∏á‡∏Å‡πå Steam Store | SteamDB
            embed.add_field(name="Links", 
                            value=f"[Steam Store](https://store.steampowered.com/app/{app_id}/) | [SteamDB](https://steamdb.info/app/{app_id}/)", 
                            inline=False)
            
            # ‡πÉ‡∏ä‡πâ set_image ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏†‡∏≤‡∏û‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏ï‡πá‡∏° Embed
            if steam_data['image']:
                embed.set_image(url=steam_data['image'])
        else:
            embed.add_field(name="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Steam", value="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°‡∏ö‡∏ô Steam", inline=False)
            
        if file_url_200:
            embed.add_field(
                name="üì¶ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î", 
                value=f"[**‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‚Üó**]({file_url_200})", 
                inline=False
            )
        else:
            embed.add_field(
                name="üì¶ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå", 
                value="", 
                inline=False
            )
        
        await message.channel.send(embed=embed)

# --- 5. Main Execution ---
if __name__ == '__main__':
    keep_alive() 
    try:
        if not DISCORD_BOT_TOKEN or DISCORD_BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
            print("FATAL ERROR: Please set the DISCORD_BOT_TOKEN environment variable or change the default value.")
        else:
            bot.run(DISCORD_BOT_TOKEN)
    except discord.errors.LoginFailure:
        print("FATAL ERROR: Invalid Discord Bot Token. Please check your token.")
    except Exception as e:
        print(f"An error occurred while running the bot: {e}")
